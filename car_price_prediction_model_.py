# -*- coding: utf-8 -*-
"""Car price prediction model .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C73DWqbdAIPzCg2Xzey706fp3poFC28A
"""

#importing dependencies

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

# Data Collection And Processing

# loading the data from csv file to pandas dataframe
car_dataset = pd.read_csv('/content/drive/MyDrive/mlproject2/car data.csv')

# inspecting the first 5 rows of the dataframe
car_dataset.head()

# checking the number of rows and columns
car_dataset.shape

# getting some information about the dataset
car_dataset.info()

# checking the number of missing values
car_dataset.isnull().sum()

# checking the distribution of categorical data
print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

# Encoding the categorical data

# encoding "Fuel_Type" column
car_dataset.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}} ,inplace=True)

# encoding "Seller_Type" column
car_dataset.replace({'Seller_Type':{'Dealer':0,'Individual':1}}, inplace=True)

# encoding the "Trasmission" column
car_dataset.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True )

car_dataset.head()

#Splitting the data and target

X = car_dataset.drop(['Car_Name','Selling_Price'],axis=1)
Y = car_dataset['Selling_Price']

print(X)

print(Y)

#Splitting Training And Test data

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.1, random_state=2 )

#model Training

# Linear Regression

# loading the linear regression model
lin_reg_model = LinearRegression()

lin_reg_model.fit(X_train,Y_train)

#Model Evaluation

#prediction on traing the data
training_data_prediction = lin_reg_model.predict(X_train)

# R squared Error
error_score = metrics.r2_score(Y_train, training_data_prediction)

print("R squared Error: " , error_score)

#Visualize the actual prices and prediction prices

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual price")
plt.ylabel("Predicted price ")
plt.title("Actual price vs Predicted Prices ")
plt.show()

# prediction on training data
test_data_prediction = lin_reg_model.predict(X_test)

# R squared Error
error_score = metrics.r2_score(Y_test, test_data_prediction)
print("R squared Error: ", error_score)

plt.scatter(Y_test, test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price Vs Predicted Price ")
plt.show()

#Lasso Regression

#loading the liner regression model
lass_reg_model = Lasso()

lass_reg_model.fit(X_train,Y_train)

#Model Evaluation

#prediction on trainig data
training_data_prediciton = lass_reg_model.predict(X_train)

# R squared Error
error_score  = metrics.r2_score(Y_train , training_data_prediciton)
print("R squared Error:", error_score)

# visualize the actual price and predicted price

plt.scatter(Y_train , training_data_prediciton)
plt.xlabel("Actual Price ")
plt.ylabel(" Predicted Price ")
plt.title(" Actual price vs predicted price ")
plt.show()

# prediion on traing data
test_data_prediction = lass_reg_model.predict(X_test)

# R squared error
error_score = metrics.r2_score(Y_test , test_data_prediction)
print("R squared error" , error_score)

plt.scatter(Y_test , test_data_prediction)
plt.xlabel("Actual priece")
plt.ylabel("predicted price ")
plt.title(" actual price vs predicted price ")
plt.show()

